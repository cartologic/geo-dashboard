{"version":3,"sources":["store/actions/Dashboards.js","store/actions/index.js","assets/img/others/default-dashboard.png","components/Dashboard/Dashboard.js","views/Dashboards/Dashboards.js"],"names":["createDashboard","newDashboardTitle","dispatch","processWithCreateDashboard","setTimeout","dismissAlert","type","actionTypes","toggleNewDashboardModal","loadSavedDashboards","deleteDashboard","dashboardID","proceedWithDeleteDashboard","saveDashboard","dashboardObject","toggleEditMode","__webpack_require__","d","__webpack_exports__","Dashboards_toggleNewDashboardModal","Dashboards_loadSavedDashboards","Dashboards_dismissAlert","Dashboards_saveDashboard","Dashboards_toggleEditMode","module","exports","p","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDashboardTitle","event","setState","newTitle","target","value","setDashboardTheme","newTheme","date_created","state","id","title","theme","onSaveDashboard","toggleDeleteModal","bind","assertThisInitialized","toggleConfigureModal","deleteModalOpen","configureModalOpen","_this2","react_default","a","createElement","reactstrap_es","xs","sm","md","key","isOpen","toggle","className","onClick","onDeleteDashboard","color","action","method","row","htmlFor","onChange","name","placeholder","href","src","DefaultDashboardLogo","alt","dist_default","interval","format","date","Component","connect","actions","Dashboards","setNewDashboardTitle","dashboardList","map","dashboard","index","components_Dashboard_Dashboard","fab_esm","mainButtonStyles","background","position","bottom","right","icon","text","onToggleNewDashboardModal","style","disabled","alertColor","alertOpen","alertDismiss","alertMessage","newDashboardModalOpen","onDashboardCreate","dashboardsReducer"],"mappings":"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","file":"static/js/8.8a95853d.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nexport const createDashboard = (newDashboardTitle) => {\r\n    return dispatch => {\r\n        dispatch(processWithCreateDashboard(newDashboardTitle));\r\n        setTimeout(() => {\r\n            dispatch(dismissAlert());\r\n        }, 1 * 5000);\r\n    }\r\n};\r\n\r\nconst processWithCreateDashboard = (newDashboardTitle) => {\r\n    return {\r\n        type: actionTypes.CREATE_DASHBOARD,\r\n        newDashboardTitle: newDashboardTitle\r\n    };\r\n};\r\n\r\nexport const toggleNewDashboardModal = () => {\r\n    return {\r\n        type: actionTypes.TOGGLENEWDASHBOARDMODAL\r\n    };\r\n};\r\n\r\nexport const loadSavedDashboards = () => {\r\n    return {\r\n        type: actionTypes.LOADSAVEDDASHBOARDS\r\n    };\r\n};\r\n\r\nexport const deleteDashboard = (dashboardID) => {\r\n    return dispatch => {\r\n        dispatch(proceedWithDeleteDashboard(dashboardID));\r\n        setTimeout(() => {\r\n            dispatch(dismissAlert());\r\n        }, 1 * 5000);\r\n    }\r\n};\r\n\r\nconst proceedWithDeleteDashboard = (dashboardID) => {\r\n    return {\r\n        type: actionTypes.DELETEDASHBOARD,\r\n        dashboardID: dashboardID\r\n    };\r\n};\r\n\r\nexport const dismissAlert = () => {\r\n    return {\r\n        type: actionTypes.DISMISSALERT\r\n    };\r\n};\r\n\r\nexport const saveDashboard = (dashboardObject) => {\r\n    return {\r\n        type: actionTypes.SAVEDASHBOARD,\r\n        dashboardObject: dashboardObject\r\n    };\r\n};\r\n\r\nexport const toggleEditMode = () => {\r\n    return {\r\n        type: actionTypes.TOGGLEEDITMODE\r\n    };\r\n};\r\n","export {\r\n    createDashboard,\r\n    toggleNewDashboardModal,\r\n    loadSavedDashboards,\r\n    deleteDashboard,\r\n    dismissAlert,\r\n    saveDashboard,\r\n    toggleEditMode,\r\n} from './Dashboards';\r\n","module.exports = __webpack_public_path__ + \"static/media/default-dashboard.c772de00.png\";","import React, {Component} from 'react';\r\nimport DefaultDashboardLogo from \"../../assets/img/others/default-dashboard.png\";\r\nimport {Col, CardBody, CardHeader, Card, CardFooter, Modal, ModalHeader,\r\n    ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input,\r\n} from \"reactstrap\";\r\nimport Moment from 'react-moment';\r\nimport * as actions from \"../../store/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleDeleteModal = this.toggleDeleteModal.bind(this);\r\n        this.toggleConfigureModal = this.toggleConfigureModal.bind(this);\r\n        this.state = {\r\n            title: this.props.dashboardObject.title,\r\n            newTitle: this.props.dashboardObject.title,\r\n            theme: this.props.dashboardObject.theme,\r\n            newTheme: this.props.dashboardObject.theme,\r\n            id: this.props.dashboardObject.id,\r\n            date_created: this.props.dashboardObject.date_created,\r\n            deleteModalOpen: false,\r\n            configureModalOpen: false,\r\n        };\r\n    }\r\n\r\n    toggleDeleteModal() {\r\n        this.setState({\r\n            deleteModalOpen: !this.state.deleteModalOpen\r\n        });\r\n    }\r\n\r\n    toggleConfigureModal() {\r\n        this.setState({\r\n            configureModalOpen: !this.state.configureModalOpen\r\n        });\r\n    }\r\n\r\n    setDashboardTitle = (event) => {\r\n        this.setState({\r\n            newTitle: event.target.value\r\n        });\r\n    }\r\n\r\n    setDashboardTheme = (event) => {\r\n        this.setState({\r\n            newTheme: event.target.value\r\n        });\r\n    }\r\n\r\n    saveDashboard = () => {\r\n        const dashboardObject = {\r\n            date_created: this.state.date_created,\r\n            id: this.state.id,\r\n            title: this.state.newTitle,\r\n            theme: this.state.newTheme,\r\n        }\r\n        this.props.onSaveDashboard(dashboardObject);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Col xs=\"12\" sm=\"2\" md=\"2\" key={this.state.id} id={this.state.id}>\r\n                <Modal isOpen={this.state.deleteModalOpen} toggle={this.toggleDeleteModal} // Delete Modal\r\n                       className={'modal-danger'}>\r\n                    <ModalHeader toggle={this.toggleDeleteModal}>Delete Dashboard {this.state.title} ?</ModalHeader>\r\n                    <ModalBody>\r\n                        This action can not be undone!\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={(event) => {this.toggleDeleteModal(); this.props.onDeleteDashboard(this.state.id)}} color=\"danger\">Delete</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggleDeleteModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Modal isOpen={this.state.configureModalOpen} // Configure Modal\r\n                       className={'modal-primary'}>\r\n                    <ModalHeader toggle={this.toggleConfigureModal}>Configure Dashboard</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form action=\"\" method=\"post\" className=\"form-horizontal\">\r\n                            <FormGroup row>\r\n                                <Col md=\"2\"><Label htmlFor=\"dashboard-title\">Title</Label></Col>\r\n                                <Col xs=\"12\" md=\"10\">\r\n                                    <Input value={this.state.newTitle} onChange={this.setDashboardTitle} type=\"text\" id=\"dashboard-title\" name=\"dashboard-title\" placeholder=\"Please enter title for dashboard\" />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md=\"2\">\r\n                                    <Label htmlFor=\"themeSelect\">Theme</Label>\r\n                                </Col>\r\n                                <Col xs=\"12\" md=\"10\">\r\n                                    <Input type=\"select\" name=\"themeSelect\" id=\"themeSelect\" onChange={this.setDashboardTheme} value={this.state.newTheme} className={this.state.newTheme}>\r\n                                        <option value=\"\">Default</option>\r\n                                        <option className=\"bg-primary\" value=\"border-primary\">Border Primary</option>\r\n                                        <option className=\"bg-secondary\" value=\"border-secondary\">Border Secondary</option>\r\n                                        <option className=\"bg-success\" value=\"border-success\">Border Success</option>\r\n                                        <option className=\"bg-info\" value=\"border-info\">Border Info</option>\r\n                                        <option className=\"bg-warning\" value=\"border-warning\">Border Warning</option>\r\n                                        <option className=\"bg-danger\" value=\"border-danger\">Border Danger</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={(event) => {this.toggleConfigureModal(); this.saveDashboard()}} color=\"primary\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggleConfigureModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Card className={this.state.theme}>\r\n                    <CardHeader className={this.state.theme}>\r\n                        <a href={\"#/dashboards/\"+this.state.id}>{this.state.title}</a>\r\n                        <div className=\"card-header-actions\">\r\n                            <button onClick={this.toggleConfigureModal} className=\"card-header-action btn btn-setting\"><i className=\"icon-settings\"></i></button>\r\n                            <button onClick={this.toggleDeleteModal} className=\"card-header-action btn btn-close\"><i className=\"icon-close\"></i></button>\r\n                        </div>\r\n                    </CardHeader>\r\n                    <CardBody><img className=\"card-img-bottom\" src={DefaultDashboardLogo}\r\n                                   alt=\"Default Dashboard\"/></CardBody>\r\n                    <CardFooter className={this.state.theme}>\r\n                        Created - <Moment interval={0} format=\"DD MMM YYYY - hh:mm a\" date={this.state.date_created}/>\r\n                    </CardFooter>\r\n                </Card>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSaveDashboard: (dashboardObject) => dispatch(actions.saveDashboard(dashboardObject)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Dashboard);\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup, Input, Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Row,\r\n} from 'reactstrap';\r\nimport {Fab, Action} from 'react-tiny-fab';\r\nimport 'react-tiny-fab/dist/styles.min.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from \"react-redux\";\r\nimport Dashboard from \"../../components/Dashboard/Dashboard\";\r\n\r\n\r\nclass Dashboards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newDashboardTitle: '',\r\n        };\r\n    }\r\n\r\n    setNewDashboardTitle = (event) => {\r\n        this.setState({\r\n            newDashboardTitle: event.target.value\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadSavedDashboards();\r\n    }\r\n\r\n    render() {\r\n        const dashboardList = this.props.dashboardList.map(\r\n            (dashboard, index) =>\r\n                <Dashboard key={dashboard.id} dashboardObject={dashboard}\r\n                           onDeleteDashboard={this.props.onDeleteDashboard}/>\r\n        );\r\n\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <Fab\r\n                    mainButtonStyles={{background: '#20a8d8'}}\r\n                    event=\"hover\"\r\n                    position={{bottom:30, right:0}}\r\n                    icon={<i className=\"fa fa-superpowers\"/>}>\r\n                    <Action\r\n                        text=\"New Dashboard\"\r\n                        onClick={this.props.onToggleNewDashboardModal}\r\n                        style={{background: '#4dbd74'}}><i className=\"fa fa-plus\"/>\r\n                    </Action>\r\n                    <Action\r\n                        disabled\r\n                        text=\"Import (coming soon)\"\r\n                        style={{background: '#4dbd74'}}><i className=\"fa fa-download\"/>\r\n                    </Action>\r\n                </Fab>\r\n                <Alert color={this.props.alertColor} isOpen={this.props.alertOpen} toggle={this.props.alertDismiss}>\r\n                    {this.props.alertMessage}\r\n                </Alert>\r\n                <Row>\r\n                    <Col>\r\n                        <Modal isOpen={this.props.newDashboardModalOpen}\r\n                               toggle={this.props.onToggleNewDashboardModal}\r\n                               className={'modal-primary'}>\r\n                            <ModalHeader toggle={this.props.onToggleNewDashboardModal}>Create\r\n                                Dashboard</ModalHeader>\r\n                            <ModalBody>\r\n                                <Form action=\"\" method=\"post\" className=\"form-horizontal\">\r\n                                    <FormGroup row>\r\n                                        <Col md=\"2\"><Label htmlFor=\"dashboard-title\">Title</Label></Col>\r\n                                        <Col xs=\"12\" md=\"10\">\r\n                                            <Input onChange={this.setNewDashboardTitle} type=\"text\"\r\n                                                   id=\"dashboard-title\" name=\"dashboard-title\"\r\n                                                   placeholder=\"Please enter title for dashboard\"/>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Form>\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                                <Button disabled={this.state.newDashboardTitle ? false : true} color=\"primary\"\r\n                                        onClick={() => this.props.onDashboardCreate(this.state.newDashboardTitle)}>Create</Button>{' '}\r\n                                <Button color=\"secondary\"\r\n                                        onClick={this.props.onToggleNewDashboardModal}>Cancel</Button>\r\n                            </ModalFooter>\r\n                        </Modal>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"top-buffer\">\r\n                    {dashboardList}\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        newDashboardModalOpen: state.dashboardsReducer.newDashboardModalOpen,\r\n        dashboardList: state.dashboardsReducer.dashboardList,\r\n        alertOpen: state.dashboardsReducer.alertOpen,\r\n        alertMessage: state.dashboardsReducer.alertMessage,\r\n        alertColor: state.dashboardsReducer.alertColor,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onDashboardCreate: (newDashboardTitle) => dispatch(actions.createDashboard(newDashboardTitle)),\r\n        onToggleNewDashboardModal: () => dispatch(actions.toggleNewDashboardModal()),\r\n        loadSavedDashboards: () => dispatch(actions.loadSavedDashboards()),\r\n        onDeleteDashboard: (dashboardID) => dispatch(actions.deleteDashboard(dashboardID)),\r\n        alertDismiss: () => dispatch(actions.dismissAlert())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboards);\r\n"],"sourceRoot":""}