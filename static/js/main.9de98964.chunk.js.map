{"version":3,"sources":["polyfill.js","App.js","serviceWorker.js","store/reducers/Dashboards.js","index.js","store/actions/actionTypes.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","loading","react_default","a","createElement","className","DefaultLayout","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","Login","Register","Page404","Page500","App","HashRouter","Switch","Route","exact","path","name","component","Component","Boolean","location","hostname","match","uuidv","require","initialState","newDashboardModalOpen","dashboardList","alertOpen","alertMessage","alertColor","reducer","state","arguments","length","action","type","actionTypes","updatedState","newDashboardList","currentDate","Date","push","title","newDashboardTitle","id","date_created","widgets","localStorage","setItem","JSON","stringify","Object","objectSpread","createDashboard","toggleNewDashboardModal","storedData","getItem","parse","loadSavedDashboards","i","dashboardID","splice","deleteDashboard","dismissAlert","dashboardObject","saveDashboard","composeEnhancers","compose","rootReducer","combineReducers","dashboardsReducer","store","createStore","applyMiddleware","thunk","app","es","src_App_0","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","CREATE_DASHBOARD","TOGGLENEWDASHBOARDMODAL","LOADSAVEDDASHBOARDS","DELETEDASHBOARD","DISMISSALERT","SAVEDASHBOARD"],"mappings":"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","file":"static/js/main.9de98964.chunk.js","sourcesContent":["/*\r\n* required polyfills\r\n*/\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es6/symbol'\r\n// import 'core-js/es6/object'\r\n// import 'core-js/es6/function'\r\n// import 'core-js/es6/parse-int'\r\n// import 'core-js/es6/parse-float'\r\n// import 'core-js/es6/number'\r\n// import 'core-js/es6/math'\r\n// import 'core-js/es6/string'\r\n// import 'core-js/es6/date'\r\nimport 'core-js/es6/array'\r\n// import 'core-js/es6/regexp'\r\nimport 'core-js/es6/map'\r\n// import 'core-js/es6/weak-map'\r\nimport 'core-js/es6/set'\r\nimport 'core-js/es7/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es6/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es7/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import React, { Component } from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\n// import { renderRoutes } from 'react-router-config';\r\nimport Loadable from 'react-loadable';\r\nimport './App.scss';\r\n\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\n\r\n// Containers\r\nconst DefaultLayout = Loadable({\r\n  loader: () => import('./containers/DefaultLayout'),\r\n  loading\r\n});\r\n\r\n// Pages\r\nconst Login = Loadable({\r\n  loader: () => import('./views/Pages/Login'),\r\n  loading\r\n});\r\n\r\nconst Register = Loadable({\r\n  loader: () => import('./views/Pages/Register'),\r\n  loading\r\n});\r\n\r\nconst Page404 = Loadable({\r\n  loader: () => import('./views/Pages/Page404'),\r\n  loading\r\n});\r\n\r\nconst Page500 = Loadable({\r\n  loader: () => import('./views/Pages/Page500'),\r\n  loading\r\n});\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n          <Switch>\r\n            <Route exact path=\"/login\" name=\"Login Page\" component={Login} />\r\n            <Route exact path=\"/register\" name=\"Register Page\" component={Register} />\r\n            <Route exact path=\"/404\" name=\"Page 404\" component={Page404} />\r\n            <Route exact path=\"/500\" name=\"Page 500\" component={Page500} />\r\n            <Route path=\"/\" name=\"Base\" component={DefaultLayout} />\r\n          </Switch>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from '../actions/actionTypes';\r\nconst uuidv = require('uuid/v4');\r\n\r\nconst initialState = {\r\n    newDashboardModalOpen: false,\r\n    dashboardList: [],\r\n    alertOpen: false,\r\n    alertMessage: \"Welcome Django User\",\r\n    alertColor: \"success\",\r\n};\r\n\r\nconst createDashboard = (state, action) => {\r\n    let updatedState = state;\r\n    let newDashboardList = updatedState.dashboardList;\r\n    let currentDate = new Date();\r\n    newDashboardList.push({\r\n        title: action.newDashboardTitle,\r\n        id: uuidv(),\r\n        date_created: currentDate,\r\n        widgets: [],\r\n    })\r\n    localStorage.setItem(\"dashboardList\", JSON.stringify(newDashboardList));\r\n    updatedState = {\r\n        newDashboardModalOpen: false,\r\n        dashboardList: newDashboardList,\r\n        alertOpen: true,\r\n        alertMessage: \"Dashboard Created Successfully!\",\r\n        alertColor: \"success\",\r\n    };\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n}\r\n\r\nconst toggleNewDashboardModal = (state, action) => {\r\n    const updatedState = {newDashboardModalOpen: !state.newDashboardModalOpen};\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n}\r\n\r\nconst loadSavedDashboards = (state, action) => {\r\n    let updatedState = state;\r\n    const storedData = localStorage.getItem(\"dashboardList\");\r\n    if (storedData) {\r\n        const newDashboardList = JSON.parse(storedData);\r\n        updatedState = {dashboardList: newDashboardList};\r\n    }\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n}\r\n\r\nconst deleteDashboard = (state, action) => {\r\n    let updatedState = state;\r\n    for (let i=0; i<updatedState.dashboardList.length; i++) {\r\n        if(updatedState.dashboardList[i].id === action.dashboardID) {\r\n            let newDashboardList = updatedState.dashboardList;\r\n            newDashboardList.splice(i, 1);\r\n            localStorage.setItem(\"dashboardList\", JSON.stringify(newDashboardList));\r\n            updatedState = {\r\n                dashboardList: newDashboardList,\r\n                alertOpen: true,\r\n                alertMessage: \"Dashboard Deleted Successfully!\",\r\n                alertColor: \"danger\",\r\n            };\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n}\r\n\r\nconst dismissAlert = (state, action) => {\r\n    const updatedState = {alertOpen: !state.alertOpen};\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n}\r\n\r\nconst saveDashboard = (state, action) => {\r\n    let updatedState = state;\r\n    for (let i=0; i<updatedState.dashboardList.length; i++) {\r\n        if(updatedState.dashboardList[i].id === action.dashboardObject.id) {\r\n            let newDashboardList = updatedState.dashboardList;\r\n            newDashboardList[i] = {\r\n                ...newDashboardList[i],\r\n                title: action.dashboardObject.title\r\n            };\r\n            localStorage.setItem(\"dashboardList\", JSON.stringify(newDashboardList));\r\n            updatedState = {\r\n                dashboardList: newDashboardList,\r\n                alertOpen: true,\r\n                alertMessage: \"Dashboard Updated Successfully! Please refresh to see the new changes!\",\r\n                alertColor: \"success\",\r\n            };\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CREATE_DASHBOARD: return createDashboard(state, action);\r\n        case actionTypes.TOGGLENEWDASHBOARDMODAL: return toggleNewDashboardModal(state, action);\r\n        case actionTypes.LOADSAVEDDASHBOARDS: return loadSavedDashboards(state, action);\r\n        case actionTypes.DELETEDASHBOARD: return deleteDashboard(state, action);\r\n        case actionTypes.DISMISSALERT: return dismissAlert(state, action);\r\n        case actionTypes.SAVEDASHBOARD: return saveDashboard(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\nimport 'react-app-polyfill/ie11'; // For IE 11 support\nimport './polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"../node_modules/react-grid-layout/css/styles.css\";\nimport \"../node_modules/react-resizable/css/styles.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport dashboardsReducer from './store/reducers/Dashboards';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || null : compose;\nconst rootReducer = combineReducers({\n    dashboardsReducer: dashboardsReducer,\n});\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\nconst app = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const CREATE_DASHBOARD = 'CREATE_DASHBOARD';\r\nexport const TOGGLENEWDASHBOARDMODAL = 'TOGGLENEWDASHBOARDMODAL';\r\nexport const LOADSAVEDDASHBOARDS = 'LOADSAVEDDASHBOARDS';\r\nexport const DELETEDASHBOARD = 'DELETEDASHBOARD';\r\nexport const DISMISSALERT = 'DISMISSALERT';\r\nexport const SAVEDASHBOARD = 'SAVEDASHBOARD';\r\n"],"sourceRoot":""}