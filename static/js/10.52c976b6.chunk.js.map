{"version":3,"sources":["assets/img/others/default-dashboard.png","store/actions/Dashboards.js","components/Dashboard/Dashboard.js","views/Dashboards/Dashboards.js"],"names":["module","exports","__webpack_require__","p","processWithCreateDashboard","newDashboardTitle","type","actionTypes","proceedWithDeleteDashboard","dashboardID","dismissAlert","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDashboardTitle","event","setState","newTitle","target","value","saveDashboard","dashboardObject","date_created","state","id","title","onSaveDashboard","toggleDeleteModal","bind","assertThisInitialized","toggleConfigureModal","deleteModalOpen","configureModalOpen","_this2","react_default","a","createElement","reactstrap_es","xs","sm","md","key","isOpen","toggle","className","onClick","onDeleteDashboard","color","action","method","row","htmlFor","onChange","name","placeholder","href","src","DefaultDashboardLogo","alt","dist_default","interval","format","date","Component","connect","dispatch","actions","Dashboards","setNewDashboardTitle","loadSavedDashboards","dashboardList","map","dashboard","index","components_Dashboard_Dashboard","alertColor","alertOpen","alertDismiss","alertMessage","onToggleNewDashboardModal","newDashboardModalOpen","disabled","onDashboardCreate","dashboardsReducer","setTimeout"],"mappings":"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","file":"static/js/10.52c976b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-dashboard.c772de00.png\";","import * as actionTypes from './actionTypes';\r\n\r\nexport const createDashboard = (newDashboardTitle) => {\r\n    return dispatch => {\r\n        dispatch(processWithCreateDashboard(newDashboardTitle));\r\n        setTimeout(() => { dispatch(dismissAlert()); }, 1 * 5000);\r\n    }\r\n};\r\n\r\nconst processWithCreateDashboard = (newDashboardTitle) => {\r\n    return {\r\n        type: actionTypes.CREATE_DASHBOARD,\r\n        newDashboardTitle: newDashboardTitle\r\n    };\r\n};\r\n\r\nexport const toggleNewDashboardModal = () => {\r\n    return {\r\n        type: actionTypes.TOGGLENEWDASHBOARDMODAL\r\n    };\r\n};\r\n\r\nexport const loadSavedDashboards = () => {\r\n    return {\r\n        type: actionTypes.LOADSAVEDDASHBOARDS\r\n    };\r\n};\r\n\r\nexport const deleteDashboard = (dashboardID) => {\r\n    return dispatch => {\r\n        dispatch(proceedWithDeleteDashboard(dashboardID));\r\n        setTimeout(() => { dispatch(dismissAlert()); }, 1 * 5000);\r\n    }\r\n};\r\n\r\nconst proceedWithDeleteDashboard = (dashboardID) => {\r\n    return {\r\n        type: actionTypes.DELETEDASHBOARD,\r\n        dashboardID: dashboardID\r\n    };\r\n};\r\n\r\nexport const dismissAlert = () => {\r\n    return {\r\n        type: actionTypes.DISMISSALERT\r\n    };\r\n};\r\n\r\nexport const saveDashboard = (dashboardObject) => {\r\n    return {\r\n        type: actionTypes.SAVEDASHBOARD,\r\n        dashboardObject: dashboardObject\r\n    };\r\n};\r\n","import React, {Component} from 'react';\r\nimport DefaultDashboardLogo from \"../../assets/img/others/default-dashboard.png\";\r\nimport {Col, CardBody, CardHeader, Card, CardFooter, Modal, ModalHeader,\r\n    ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input,\r\n} from \"reactstrap\";\r\nimport Moment from 'react-moment';\r\nimport * as actions from \"../../store/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleDeleteModal = this.toggleDeleteModal.bind(this);\r\n        this.toggleConfigureModal = this.toggleConfigureModal.bind(this);\r\n        this.state = {\r\n            title: this.props.dashboardObject.title,\r\n            newTitle: this.props.dashboardObject.title,\r\n            id: this.props.dashboardObject.id,\r\n            date_created: this.props.dashboardObject.date_created,\r\n            deleteModalOpen: false,\r\n            configureModalOpen: false,\r\n        };\r\n    }\r\n\r\n    toggleDeleteModal() {\r\n        this.setState({\r\n            deleteModalOpen: !this.state.deleteModalOpen\r\n        });\r\n    }\r\n\r\n    toggleConfigureModal() {\r\n        this.setState({\r\n            configureModalOpen: !this.state.configureModalOpen\r\n        });\r\n    }\r\n\r\n    setDashboardTitle = (event) => {\r\n        this.setState({\r\n            newTitle: event.target.value\r\n        });\r\n    }\r\n\r\n    saveDashboard = () => {\r\n        const dashboardObject = {\r\n            date_created: this.state.date_created,\r\n            id: this.state.id,\r\n            title: this.state.newTitle,\r\n        }\r\n        this.props.onSaveDashboard(dashboardObject);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Col xs=\"12\" sm=\"3\" md=\"4\" key={this.state.id} id={this.state.id}>\r\n                <Modal isOpen={this.state.deleteModalOpen} toggle={this.toggleDeleteModal}\r\n                       className={'modal-danger'}>\r\n                    <ModalHeader toggle={this.toggleDeleteModal}>Delete Dashboard {this.state.title} ?</ModalHeader>\r\n                    <ModalBody>\r\n                        This action can not be undone!\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={(event) => {this.toggleDeleteModal(); this.props.onDeleteDashboard(this.state.id)}} color=\"danger\">Delete</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggleDeleteModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Modal isOpen={this.state.configureModalOpen}\r\n                       className={'modal-primary'}>\r\n                    <ModalHeader toggle={this.toggleConfigureModal}>Configure Dashboard</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form action=\"\" method=\"post\" className=\"form-horizontal\">\r\n                            <FormGroup row>\r\n                                <Col md=\"2\"><Label htmlFor=\"dashboard-title\">Title</Label></Col>\r\n                                <Col xs=\"12\" md=\"10\">\r\n                                    <Input value={this.state.newTitle} onChange={this.setDashboardTitle} type=\"text\" id=\"dashboard-title\" name=\"dashboard-title\" placeholder=\"Please enter title for dashboard\" />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={(event) => {this.toggleConfigureModal(); this.saveDashboard()}} color=\"primary\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggleConfigureModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <a href={\"#/dashboards/\"+this.state.id}>{this.state.title}</a>\r\n                        <div className=\"card-header-actions\">\r\n                            <button onClick={this.toggleConfigureModal} className=\"card-header-action btn btn-setting\"><i className=\"icon-settings\"></i></button>\r\n                            <button onClick={this.toggleDeleteModal} className=\"card-header-action btn btn-close\"><i className=\"icon-close\"></i></button>\r\n                        </div>\r\n                    </CardHeader>\r\n                    <CardBody><img className=\"card-img-bottom\" src={DefaultDashboardLogo}\r\n                                   alt=\"Default Dashboard\"/></CardBody>\r\n                    <CardFooter>\r\n                        Created - <Moment interval={0} format=\"DD MMM YYYY - hh:mm a\" date={this.state.date_created}/>\r\n                    </CardFooter>\r\n                </Card>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSaveDashboard: (dashboardObject) => dispatch(actions.saveDashboard(dashboardObject)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Dashboard);\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    ButtonGroup,\r\n    Col,\r\n    Form,\r\n    FormGroup, Input, Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Row,\r\n} from 'reactstrap';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from \"react-redux\";\r\nimport Dashboard from \"../../components/Dashboard/Dashboard\";\r\n\r\n\r\nclass Dashboards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newDashboardTitle: '',\r\n        };\r\n    }\r\n\r\n    setNewDashboardTitle = (event) => {\r\n        this.setState({\r\n            newDashboardTitle: event.target.value\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadSavedDashboards();\r\n    }\r\n\r\n\r\n    render() {\r\n        const dashboardList = this.props.dashboardList.map(\r\n            (dashboard, index) =>\r\n                <Dashboard key={dashboard.id} dashboardObject={dashboard}\r\n                           onDeleteDashboard={this.props.onDeleteDashboard}/>\r\n        );\r\n\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <Alert color={this.props.alertColor} isOpen={this.props.alertOpen} toggle={this.props.alertDismiss}>\r\n                    {this.props.alertMessage}\r\n                </Alert>\r\n                <Row>\r\n                    <Col>\r\n                        <ButtonGroup className=\"mr-2\">\r\n                            <Button color=\"primary\" onClick={this.props.onToggleNewDashboardModal}>New Dashboard</Button>\r\n                            <Modal isOpen={this.props.newDashboardModalOpen} toggle={this.props.onToggleNewDashboardModal}\r\n                                   className={'modal-primary'}>\r\n                                <ModalHeader toggle={this.props.onToggleNewDashboardModal}>Create Dashboard</ModalHeader>\r\n                                <ModalBody>\r\n                                    <Form action=\"\" method=\"post\" className=\"form-horizontal\">\r\n                                        <FormGroup row>\r\n                                            <Col md=\"2\"><Label htmlFor=\"dashboard-title\">Title</Label></Col>\r\n                                            <Col xs=\"12\" md=\"10\">\r\n                                                <Input onChange={this.setNewDashboardTitle} type=\"text\" id=\"dashboard-title\" name=\"dashboard-title\" placeholder=\"Please enter title for dashboard\"/>\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button disabled={this.state.newDashboardTitle ? false : true} color=\"primary\" onClick={() => this.props.onDashboardCreate(this.state.newDashboardTitle)}>Create</Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.props.onToggleNewDashboardModal}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup className=\"mr-2\">\r\n                            <Button disabled color=\"success\">Import</Button>\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"top-buffer\">\r\n                    {dashboardList}\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        newDashboardModalOpen: state.dashboardsReducer.newDashboardModalOpen,\r\n        dashboardList: state.dashboardsReducer.dashboardList,\r\n        alertOpen: state.dashboardsReducer.alertOpen,\r\n        alertMessage: state.dashboardsReducer.alertMessage,\r\n        alertColor: state.dashboardsReducer.alertColor,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onDashboardCreate: (newDashboardTitle) => dispatch(actions.createDashboard(newDashboardTitle)),\r\n        onToggleNewDashboardModal: () => dispatch(actions.toggleNewDashboardModal()),\r\n        loadSavedDashboards: () => dispatch(actions.loadSavedDashboards()),\r\n        onDeleteDashboard: (dashboardID) => dispatch(actions.deleteDashboard(dashboardID)),\r\n        alertDismiss: () => dispatch(actions.dismissAlert())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboards);\r\n"],"sourceRoot":""}