{"version":3,"sources":["assets/img/others/default-dashboard.png","store/actions/Dashboards.js","components/Dashboard/Dashboard.js","views/Dashboards/Dashboards.js"],"names":["module","exports","__webpack_require__","p","processWithCreateDashboard","newDashboardTitle","type","actionTypes","proceedWithDeleteDashboard","dashboardID","dismissAlert","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDashboardTitle","event","setState","newTitle","target","value","setDashboardTheme","newTheme","saveDashboard","dashboardObject","date_created","state","id","title","theme","onSaveDashboard","toggleDeleteModal","bind","assertThisInitialized","toggleConfigureModal","deleteModalOpen","configureModalOpen","_this2","react_default","a","createElement","reactstrap_es","xs","sm","md","key","isOpen","toggle","className","onClick","onDeleteDashboard","color","action","method","row","htmlFor","onChange","name","placeholder","href","src","DefaultDashboardLogo","alt","dist_default","interval","format","date","Component","connect","dispatch","actions","Dashboards","setNewDashboardTitle","loadSavedDashboards","dashboardList","map","dashboard","index","components_Dashboard_Dashboard","alertColor","alertOpen","alertDismiss","alertMessage","onToggleNewDashboardModal","newDashboardModalOpen","disabled","onDashboardCreate","dashboardsReducer","setTimeout"],"mappings":"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","file":"static/js/9.c716a221.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-dashboard.c772de00.png\";","import * as actionTypes from './actionTypes';\r\n\r\nexport const createDashboard = (newDashboardTitle) => {\r\n    return dispatch => {\r\n        dispatch(processWithCreateDashboard(newDashboardTitle));\r\n        setTimeout(() => { dispatch(dismissAlert()); }, 1 * 5000);\r\n    }\r\n};\r\n\r\nconst processWithCreateDashboard = (newDashboardTitle) => {\r\n    return {\r\n        type: actionTypes.CREATE_DASHBOARD,\r\n        newDashboardTitle: newDashboardTitle\r\n    };\r\n};\r\n\r\nexport const toggleNewDashboardModal = () => {\r\n    return {\r\n        type: actionTypes.TOGGLENEWDASHBOARDMODAL\r\n    };\r\n};\r\n\r\nexport const loadSavedDashboards = () => {\r\n    return {\r\n        type: actionTypes.LOADSAVEDDASHBOARDS\r\n    };\r\n};\r\n\r\nexport const deleteDashboard = (dashboardID) => {\r\n    return dispatch => {\r\n        dispatch(proceedWithDeleteDashboard(dashboardID));\r\n        setTimeout(() => { dispatch(dismissAlert()); }, 1 * 5000);\r\n    }\r\n};\r\n\r\nconst proceedWithDeleteDashboard = (dashboardID) => {\r\n    return {\r\n        type: actionTypes.DELETEDASHBOARD,\r\n        dashboardID: dashboardID\r\n    };\r\n};\r\n\r\nexport const dismissAlert = () => {\r\n    return {\r\n        type: actionTypes.DISMISSALERT\r\n    };\r\n};\r\n\r\nexport const saveDashboard = (dashboardObject) => {\r\n    return {\r\n        type: actionTypes.SAVEDASHBOARD,\r\n        dashboardObject: dashboardObject\r\n    };\r\n};\r\n","import React, {Component} from 'react';\r\nimport DefaultDashboardLogo from \"../../assets/img/others/default-dashboard.png\";\r\nimport {Col, CardBody, CardHeader, Card, CardFooter, Modal, ModalHeader,\r\n    ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input,\r\n} from \"reactstrap\";\r\nimport Moment from 'react-moment';\r\nimport * as actions from \"../../store/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleDeleteModal = this.toggleDeleteModal.bind(this);\r\n        this.toggleConfigureModal = this.toggleConfigureModal.bind(this);\r\n        this.state = {\r\n            title: this.props.dashboardObject.title,\r\n            newTitle: this.props.dashboardObject.title,\r\n            theme: this.props.dashboardObject.theme,\r\n            newTheme: this.props.dashboardObject.theme,\r\n            id: this.props.dashboardObject.id,\r\n            date_created: this.props.dashboardObject.date_created,\r\n            deleteModalOpen: false,\r\n            configureModalOpen: false,\r\n        };\r\n    }\r\n\r\n    toggleDeleteModal() {\r\n        this.setState({\r\n            deleteModalOpen: !this.state.deleteModalOpen\r\n        });\r\n    }\r\n\r\n    toggleConfigureModal() {\r\n        this.setState({\r\n            configureModalOpen: !this.state.configureModalOpen\r\n        });\r\n    }\r\n\r\n    setDashboardTitle = (event) => {\r\n        this.setState({\r\n            newTitle: event.target.value\r\n        });\r\n    }\r\n\r\n    setDashboardTheme = (event) => {\r\n        this.setState({\r\n            newTheme: event.target.value\r\n        });\r\n    }\r\n\r\n    saveDashboard = () => {\r\n        const dashboardObject = {\r\n            date_created: this.state.date_created,\r\n            id: this.state.id,\r\n            title: this.state.newTitle,\r\n            theme: this.state.newTheme,\r\n        }\r\n        this.props.onSaveDashboard(dashboardObject);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Col xs=\"12\" sm=\"3\" md=\"4\" key={this.state.id} id={this.state.id}>\r\n                <Modal isOpen={this.state.deleteModalOpen} toggle={this.toggleDeleteModal} // Delete Modal\r\n                       className={'modal-danger'}>\r\n                    <ModalHeader toggle={this.toggleDeleteModal}>Delete Dashboard {this.state.title} ?</ModalHeader>\r\n                    <ModalBody>\r\n                        This action can not be undone!\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={(event) => {this.toggleDeleteModal(); this.props.onDeleteDashboard(this.state.id)}} color=\"danger\">Delete</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggleDeleteModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Modal isOpen={this.state.configureModalOpen} // Configure Modal\r\n                       className={'modal-primary'}>\r\n                    <ModalHeader toggle={this.toggleConfigureModal}>Configure Dashboard</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form action=\"\" method=\"post\" className=\"form-horizontal\">\r\n                            <FormGroup row>\r\n                                <Col md=\"2\"><Label htmlFor=\"dashboard-title\">Title</Label></Col>\r\n                                <Col xs=\"12\" md=\"10\">\r\n                                    <Input value={this.state.newTitle} onChange={this.setDashboardTitle} type=\"text\" id=\"dashboard-title\" name=\"dashboard-title\" placeholder=\"Please enter title for dashboard\" />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md=\"2\">\r\n                                    <Label htmlFor=\"themeSelect\">Theme</Label>\r\n                                </Col>\r\n                                <Col xs=\"12\" md=\"10\">\r\n                                    <Input type=\"select\" name=\"themeSelect\" id=\"themeSelect\" onChange={this.setDashboardTheme} value={this.state.newTheme} className={this.state.newTheme}>\r\n                                        <option value=\"\">Default</option>\r\n                                        <option className=\"bg-primary\" value=\"border-primary\">Border Primary</option>\r\n                                        <option className=\"bg-secondary\" value=\"border-secondary\">Border Secondary</option>\r\n                                        <option className=\"bg-success\" value=\"border-success\">Border Success</option>\r\n                                        <option className=\"bg-info\" value=\"border-info\">Border Info</option>\r\n                                        <option className=\"bg-warning\" value=\"border-warning\">Border Warning</option>\r\n                                        <option className=\"bg-danger\" value=\"border-danger\">Border Danger</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={(event) => {this.toggleConfigureModal(); this.saveDashboard()}} color=\"primary\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggleConfigureModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Card className={this.state.theme}>\r\n                    <CardHeader className={this.state.theme}>\r\n                        <a href={\"#/dashboards/\"+this.state.id}>{this.state.title}</a>\r\n                        <div className=\"card-header-actions\">\r\n                            <button onClick={this.toggleConfigureModal} className=\"card-header-action btn btn-setting\"><i className=\"icon-settings\"></i></button>\r\n                            <button onClick={this.toggleDeleteModal} className=\"card-header-action btn btn-close\"><i className=\"icon-close\"></i></button>\r\n                        </div>\r\n                    </CardHeader>\r\n                    <CardBody><img className=\"card-img-bottom\" src={DefaultDashboardLogo}\r\n                                   alt=\"Default Dashboard\"/></CardBody>\r\n                    <CardFooter className={this.state.theme}>\r\n                        Created - <Moment interval={0} format=\"DD MMM YYYY - hh:mm a\" date={this.state.date_created}/>\r\n                    </CardFooter>\r\n                </Card>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSaveDashboard: (dashboardObject) => dispatch(actions.saveDashboard(dashboardObject)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Dashboard);\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    ButtonGroup,\r\n    Col,\r\n    Form,\r\n    FormGroup, Input, Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Row,\r\n} from 'reactstrap';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from \"react-redux\";\r\nimport Dashboard from \"../../components/Dashboard/Dashboard\";\r\n\r\n\r\nclass Dashboards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newDashboardTitle: '',\r\n        };\r\n    }\r\n\r\n    setNewDashboardTitle = (event) => {\r\n        this.setState({\r\n            newDashboardTitle: event.target.value\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadSavedDashboards();\r\n    }\r\n\r\n    render() {\r\n        const dashboardList = this.props.dashboardList.map(\r\n            (dashboard, index) =>\r\n                <Dashboard key={dashboard.id} dashboardObject={dashboard}\r\n                           onDeleteDashboard={this.props.onDeleteDashboard}/>\r\n        );\r\n\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <Alert color={this.props.alertColor} isOpen={this.props.alertOpen} toggle={this.props.alertDismiss}>\r\n                    {this.props.alertMessage}\r\n                </Alert>\r\n                <Row>\r\n                    <Col>\r\n                        <ButtonGroup className=\"mr-2\">\r\n                            <Button color=\"primary\" onClick={this.props.onToggleNewDashboardModal}>New\r\n                                Dashboard</Button>\r\n                            <Modal isOpen={this.props.newDashboardModalOpen}\r\n                                   toggle={this.props.onToggleNewDashboardModal}\r\n                                   className={'modal-primary'}>\r\n                                <ModalHeader toggle={this.props.onToggleNewDashboardModal}>Create\r\n                                    Dashboard</ModalHeader>\r\n                                <ModalBody>\r\n                                    <Form action=\"\" method=\"post\" className=\"form-horizontal\">\r\n                                        <FormGroup row>\r\n                                            <Col md=\"2\"><Label htmlFor=\"dashboard-title\">Title</Label></Col>\r\n                                            <Col xs=\"12\" md=\"10\">\r\n                                                <Input onChange={this.setNewDashboardTitle} type=\"text\"\r\n                                                       id=\"dashboard-title\" name=\"dashboard-title\"\r\n                                                       placeholder=\"Please enter title for dashboard\"/>\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button disabled={this.state.newDashboardTitle ? false : true} color=\"primary\"\r\n                                            onClick={() => this.props.onDashboardCreate(this.state.newDashboardTitle)}>Create</Button>{' '}\r\n                                    <Button color=\"secondary\"\r\n                                            onClick={this.props.onToggleNewDashboardModal}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </Modal>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup className=\"mr-2\">\r\n                            <Button disabled color=\"success\">Import</Button>\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"top-buffer\">\r\n                    {dashboardList}\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        newDashboardModalOpen: state.dashboardsReducer.newDashboardModalOpen,\r\n        dashboardList: state.dashboardsReducer.dashboardList,\r\n        alertOpen: state.dashboardsReducer.alertOpen,\r\n        alertMessage: state.dashboardsReducer.alertMessage,\r\n        alertColor: state.dashboardsReducer.alertColor,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onDashboardCreate: (newDashboardTitle) => dispatch(actions.createDashboard(newDashboardTitle)),\r\n        onToggleNewDashboardModal: () => dispatch(actions.toggleNewDashboardModal()),\r\n        loadSavedDashboards: () => dispatch(actions.loadSavedDashboards()),\r\n        onDeleteDashboard: (dashboardID) => dispatch(actions.deleteDashboard(dashboardID)),\r\n        alertDismiss: () => dispatch(actions.dismissAlert())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboards);\r\n"],"sourceRoot":""}